05/04/2013:		It is difficult to say exactly how the development of my random testers have come about. As it stands, I am getting 80-90% coverage with randomtestcard.c and randomtestadventure.c. Honestly, I am extremely frustrated with the directions and the nearly 0% introduction to writing C unit tests and then expecting so much out of us. Even spending 15+hours on each assignment hasn't been enough to keep up in this class (lectures notwithstanding). With that rant out of the way, I will explain my development process that has (sort of) worked for me through trial and error up until now. I begin with my imports ensuring that I have all the necessary dependencies that the file will need. Next I start looking at the parameters that get passed into the function that I am testing. I try to recreate a "state" that the function is expected to work in by simulating those variables in my test.c file. Finally, I generate multiple iterations of every game state that I can think possible for the function to work under. In the case of these random tests, I have included an integer randomizing function that can be used to generate a pseduo random integer in place of known parameter values. Finally, I attempt to understand what a reasonable output for the function should be and compare a test value against that value. All of this is done before I even run the program. I use cygwin to compile the code on my windows machine and try to work out and syntax/compiler errors from the compiler errors. Once I compile the program, I will try to run it in cygwin. If a segmentation fault is discovered, then I will import the test.c file and its dependencies into an IDE (Visual Studio 2010) and inspect the code line by line to see if I can discern the problem that way. In most cases that has worked eventually. As far as breaking the code, it hasn't been too difficult to do so. I found that running multiple iteration of smithyCard() would break the code every time if I didn't reset the state->whoseturn variable to something within the bounds of the program. Even after an hour of searching, I haven't been able to find what is reseting that value to a negative value. After an hour of searching and researching google, I have finally come to the conclusion that the makefile will create .out files in a linux environment and .exe files in a windows environment. At least I'm hoping that is the case because I amunable to discover how to create that file without forcing a linux environment in the makefile. I have added a line for both random tests to execute and run gcov on them giving a % of lines executed reading. Finally, even after all the time that I have taken attempting to complete these assignments, I am still unsure if I am doing them correctly as I have had no feedback on anything that I have done so far. 